import logging
import socket
import threading
from netfilterqueue import NetfilterQueue
from scapy.all import IP, TCP

# --- Configuration ---
BLOCKED_IP = "192.168.50.100"  # The IP to block and mimic
SSH_PORT = 22
HONEYPOT_PORT = 2222  # Fake SSH port (internal only)

# --- Logging Setup ---
logging.basicConfig(
    filename='honeypot.log',
    level=logging.INFO,
    format='%(asctime)s [HONEYPOT] %(message)s'
)

# --- Fake SSH Server for Honeypot ---
def start_fake_ssh():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(('0.0.0.0', SSH_PORT))  # Bind to real SSH port
    server.listen(5)
    print(f"[HONEYPOT] Fake SSH server running on port {SSH_PORT} for blocked IPs...")

    while True:
        client_socket, addr = server.accept()
        ip = addr[0]
        print(f"[CONNECTION ATTEMPT] {ip} connected to port 22")

        if ip == BLOCKED_IP:
            msg = "SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.3\r\n"
            client_socket.send(msg.encode())
            logging.info(f"Unauthorized SSH attempt from {ip}")
            client_socket.close()
        else:
            # Let real SSH server handle it â€” close this socket
            client_socket.close()

# --- Packet Filtering ---
def process_packet(packet):
    pkt = IP(packet.get_payload())

    if pkt.haslayer(TCP):
        src_ip = pkt[IP].src
        dst_port = pkt[TCP].dport

        print(f"[FIREWALL] {src_ip} is trying to access port {dst_port}")

        # Block only blocked IP on port 22 (SSH)
        if src_ip == BLOCKED_IP and dst_port == SSH_PORT:
            print(f"[HONEYPOT] Blocking and mimicking {src_ip} on port {dst_port}")
            packet.drop()
        else:
            packet.accept()
    else:
        packet.accept()

# --- Main ---
if _name_ == "_main_":
    print("[*] Starting Firewall + Honeypot...")

    # Start fake SSH honeypot in background
    t = threading.Thread(target=start_fake_ssh, daemon=True)
    t.start()

    nfqueue = NetfilterQueue()
    nfqueue.bind(1, process_packet)

    try:
        nfqueue.run()
    except KeyboardInterrupt:
        print("\n[*] Stopping Firewall.")
        nfqueue.unbind()
