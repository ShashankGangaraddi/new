import socket
import threading
import time

# --- Firewall configuration ---
ALLOWED_CLIENT_IPS = {'192.168.50.100'}           # Allowed source IPs (e.g., VM2)
ALLOWED_CLIENT_PORTS = {10000, 15000, 20000}      # Allowed source ports
ALLOWED_TIME_RANGE = (8, 18)                       # Allowed active hours (8:00 - 18:00)
BLACKLISTED_IPS = {'192.168.50.200'}              # Explicitly blocked IPs

# Allowed destination IPs and ports for forwarding
ALLOWED_DESTINATIONS = [
    ('8.8.8.8', 53),  # Google DNS — example target destination
    ('1.1.1.1', 53),  # Alternate DNS
]

LISTEN_IP = '0.0.0.0'   # Listen on all interfaces (recommended)
LISTEN_PORT = 8080      # Listening port

def is_within_time_window():
    current_hour = time.localtime().tm_hour
    return ALLOWED_TIME_RANGE[0] <= current_hour < ALLOWED_TIME_RANGE[1]

def handle_client(client_socket, client_address):
    print(f"Incoming connection from {client_address}")
    src_ip, src_port = client_address

    # Firewall rules enforcement
    if src_ip in BLACKLISTED_IPS:
        print(f"Denied: Blacklisted source IP {src_ip}")
        client_socket.close()
        return

    if src_ip not in ALLOWED_CLIENT_IPS:
        print(f"Denied: Source IP {src_ip} not in allowed list")
        client_socket.close()
        return

    if src_port not in ALLOWED_CLIENT_PORTS:
        print(f"Denied: Source port {src_port} not in allowed ports")
        client_socket.close()
        return

    if not is_within_time_window():
        print(f"Denied: Current hour outside allowed time range")
        client_socket.close()
        return

    # Forwarding to the first allowed destination (for demo)
    TARGET_HOST, TARGET_PORT = ALLOWED_DESTINATIONS[0]
    print(f"Accepted: {src_ip}:{src_port} → {TARGET_HOST}:{TARGET_PORT}")

    try:
        remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        remote_socket.connect((TARGET_HOST, TARGET_PORT))
    except Exception as e:
        print(f"Failed to connect to target {TARGET_HOST}:{TARGET_PORT} - {e}")
        client_socket.close()
        return

    # Relay data between client and remote host
    def forward(source, destination):
        try:
            while True:
                data = source.recv(4096)
                if not data:
                    break
                destination.sendall(data)
        except:
            pass
        finally:
            source.close()
            destination.close()

    threading.Thread(target=forward, args=(client_socket, remote_socket), daemon=True).start()
    threading.Thread(target=forward, args=(remote_socket, client_socket), daemon=True).start()

def start_firewall():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server.bind((LISTEN_IP, LISTEN_PORT))
    server.listen(20)
    print(f"Python Firewall Proxy listening on {LISTEN_IP}:{LISTEN_PORT}")

    while True:
        try:
            client_sock, client_addr = server.accept()
            threading.Thread(target=handle_client, args=(client_sock, client_addr), daemon=True).start()
        except Exception as e:
            print(f"Server error: {e}")

if _name_ == '_main_':
    start_firewall()
